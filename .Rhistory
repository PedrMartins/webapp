pipae_all
pipae_all$D == input$dayco2
pipae_all = pipae_all [ pipae_all$D == 20 &
pipae_all$M == 11 &
pipae_all$Y == 2024,]
pipae_all
pipae_all
pipae_all$D == 20
p20 = pipae_all [pipae_all$D == 20,]
p20
p20 = pipae_all [pipae_all$D == "20" ,]
p20
input$dayco2
runApp()
pipae_all
runApp()
runApp()
runApp()
runApp()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
runApp()
runApp()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
shiny::runApp()
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
runApp()
input$parco2
runApp()
shiny::runApp()
runApp()
runApp()
import_pipae <-  function(pipae = NULL){
pipae_all = data.frame()
source <- c ( "pipae1" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQmbdkhDjts41TXdkpoghubvLQ_5waEms3_RSUXBa_JBg1Z0o2AEnjRpWlTe6lv8go3nouimqUEeklI/pub?output=csv",
"pipae2" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQZb9G0b6kE_I91HK7KOtIA7XJ_-OpW6I4J4ibTU4v1ljzAlgplWdzLRpsMiLqr6reiV6Jol3yrvOkE/pub?output=csv",
"pipae3"="https://docs.google.com/spreadsheets/d/e/2PACX-1vSgEviRT5URoJqohwPc4m-HuNkwkqy9TVDOVnDsu7x0hyNYJvLPlc_B9y3TrEqNf1fhe6fPensFXlOH/pub?output=csv",
"pipae7"="https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOc4PMg1xC0qpUceE6BZV8L1oLn8D5zf-dALqqWiEQZBFJH23dzPiqwn7NOlFowHEis1N4eb7JvFZ/pub?output=csv",
"pipae8"="https://docs.google.com/spreadsheets/d/e/2PACX-1vRezDFvNifmWuJUoVIIhyazBaD281lsr4qeV3EWROGEUH8CDBD01riMOWMfDbsPH0Z8wFkEmtQRbfEC/pub?output=csv"
)
#sensores <- paste("pipae",seq(1, length(source)), sep="")
sensores <- paste("pipae", c(1:3,7:8), sep="")
if (is.null(pipae)==TRUE) {stop ("inclua sensores")}
if (length(setdiff(pipae,sensores))!= 0) {
stop("não há sensores com essa tag ou há erros na tag \n não deixe espaço entre pipae e o número
\n ex: 'pipae 7' não funcionará \n ex: 'pipae7' funciona",
call. = FALSE)
}
pipaes <- match(pipae, sensores)
for (i in pipaes){
site_url <-  source[i]
site <- read.csv(site_url, dec= ",")
if (colnames(site)[1]=="Temperature"){
site  <- site %>% select(Date, Time, everything())
}
colnames(site)[which(colnames(site) == "CO2.Concentration")] <- "CO2_ppm"
if (names(source[i]) %in%
c(paste("pipae", 2, sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par2", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", 1,sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par1", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", 7,sep=""))) {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par3", length(site$CO2_ppm))
}else {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par4", length(site$CO2_ppm))
}
pipae_all <- rbind(pipae_all, site)
}
pipae_all$Date = dmy (pipae_all$Date)
pipae_all$Time = hms (pipae_all$Time)
pipae_all= pipae_all|>
mutate(H=hour(pipae_all$Time),
m=minute(pipae_all$Time),
D=day(pipae_all$Date),
M= month(pipae_all$Date),
Y= year(pipae_all$Date))
pipae_all
}
pipae_all=import_pipae(c("pipae7","pipae2",
"pipae1", "pipae8"))
unique (pipae_all$parcela)
sort(unique (pipae_all$parcela))
runApp()
runApp()
expression(CO[2])
c("temp",
"umi",
"CO\u2082",
"parcela")
server <- function(input, output, session) {
output$TemperatureID <- renderPlot({
pipae_all = pipae_all [pipae_all$parcela ==  input$par,]
if (input$nivel == "H") {
pipae_all = pipae_all [ pipae_all$D == input$day &
pipae_all$M == input$month &
pipae_all$Y == input$year,]
} else if (input$nivel == "M" ) {
pipae_all = pipae_all [pipae_all$Y == input$year,]
} else {
pipae_all = pipae_all [ pipae_all$M == input$month &
pipae_all$Y == input$year,]
}
pipae_mediatemperatura = get_dados_separados(pipae_all,
pipae_all$Temperature,
date= pipae_all$Date,
time=pipae_all$Time,
media_nivel = input$nivel,
variavel = "temperatura")
par( bty ="n", bg = "grey99", las =1,
family="serif")
if (input$nivel == "H"){
pipae_mediatemperatura$nivel= pipae_mediatemperatura$H
escala = range(pipae_mediatemperatura$media_temperatura, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
if (nrow(pipae_mediatemperatura) == 0) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_temperatura~nivel,
data=pipae_mediatemperatura,
type="n",
ylab="Mean temperature ºC",
xlab= "Hours",
main="Temperature\nmean by hour",
ylim = c(min,max),
xlim=c(0,23))
lines(media_temperatura~nivel,
data=pipae_mediatemperatura, lty = 5,
lwd = 4, col = "darkorange")
}else if (input$nivel=="D") {
pipae_mediatemperatura$nivel= pipae_mediatemperatura$D
escala = range(pipae_mediatemperatura$media_temperatura, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
if (is.finite(min) == FALSE | is.finite(max) == FALSE) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_temperatura~nivel,
data=pipae_mediatemperatura, type="n",
ylab="Mean temperature ºC", xlab= "Days",
main="Temperature\nmean by day",
ylim = c(min,max) ,xlim=c(0,30))
lines(media_temperatura ~nivel,
data=pipae_mediatemperatura ,
lty = 5, lwd =4,
col = "darkorange")
} else {
pipae_mediatemperatura$nivel=pipae_mediatemperatura$M
escala = range(pipae_mediatemperatura$media_temperatura, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
plot (media_temperatura~nivel,
data=pipae_mediatemperatura,
type="n",ylab="Mean temperature ºC",
xlab= "Months",
main="Temperature\nmean by month",
ylim = c(min,max) ,xlim=c(1,12))
lines(media_temperatura ~nivel,
data=pipae_mediatemperatura ,
lty = 5, lwd =4,
col = "darkorange")
}
legend("topleft",c("Pipae7"),
col= c("darkorange"),
lty = c(2,3,1), bty = "n")
}, res= 96)
output$MoistureID <- renderPlot({
pipae_all = pipae_all [pipae_all$parcela ==  input$parmoisture,]
if (input$nivelmoisture == "H") {
pipae_all = pipae_all [ pipae_all$D == input$daymoisture &
pipae_all$M == input$monthmoisture &
pipae_all$Y == input$yearmoisture,]
} else if (input$nivelmoisture == "M" ) {
pipae_all = pipae_all [pipae_all$Y == input$yearmoisture,]
} else {
pipae_all = pipae_all [ pipae_all$M == input$monthmoisture &
pipae_all$Y == input$yearmoisture,]
}
pipae_mediaumidade = get_dados_separados(pipae_all, pipae_all$Humidity,
date= pipae_all$Date,
time=pipae_all$Time,
media_nivel = input$nivelmoisture,
variavel = "umidade")
par( bty ="n", bg = "grey99", las =1,
family="serif")
if (input$nivelmoisture == "H"){
pipae_mediaumidade$nivel= pipae_mediaumidade$H
escala = range(pipae_mediaumidade$media_umidade, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
if (nrow(pipae_mediaumidade) == 0) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_umidade~nivel,
data=pipae_mediaumidade, type="n",
ylab="Mean moisture %", xlab= "Hours",
main="Moisture\nmean by hour",
ylim = c(min, max),
xlim=c(0,23))
lines(media_umidade~nivel, data=pipae_mediaumidade,
lty = 5, lwd =4,
col = "darkblue")
} else if (input$nivelmoisture == "D") {
pipae_mediaumidade$nivel= pipae_mediaumidade$D
escala = range(pipae_mediaumidade$media_umidade, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
if (is.finite(min) == FALSE | is.finite(max) == FALSE) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_umidade~nivel,
data=pipae_mediaumidade, type="n",
ylab="Mean Moisture %", xlab= "Days",
main="Moisture\nmean by day",
ylim = c(min, max),
xlim=c(0,30))
lines(media_umidade~nivel, data=pipae_mediaumidade ,
lty = 5, lwd =4,
col = "darkblue")
} else {
pipae_mediaumidade$nivel=pipae_mediaumidade$M
escala = range(pipae_mediaumidade$media_umidade, na.rm = TRUE)
min = trunc (escala [1] - 10)
max = trunc (escala [2] + 10)
plot (media_umidade~nivel, data=pipae_mediaumidade,
type="n",
ylab="Mean Moisture %", xlab= "Months",
main="Moisture\nmean by month",
ylim = c(min, max),
xlim=c(1,12))
lines(media_umidade ~nivel, data=pipae_mediaumidade ,
lty = 5, lwd =4,
col = "darkblue")
}
legend("topleft",c("Pipae7"),
col= c("darkblue"),
lty = c(2,3,1), bty = "n")
},res=96)
output$CO2ID <- renderPlot({
pipae_all = pipae_all [pipae_all$parcela ==  input$parco2,]
if (input$nivelco2 == "H") {
pipae_all = pipae_all [ pipae_all$D == input$dayco2 &
pipae_all$M == input$monthco2 &
pipae_all$Y == input$yearco2,]
} else if (input$nivelco2 == "M" ) {
pipae_all = pipae_all [pipae_all$Y == input$yearco2,]
} else {
pipae_all = pipae_all [ pipae_all$M == input$monthco2 &
pipae_all$Y == input$yearco2,]
}
pipae_mediaCO2 = get_dados_separados(pipae_all, pipae_all$CO2_ppm,
date= pipae_all$Date,
time=pipae_all$Time,
media_nivel = input$nivelco2,
variavel = "co2")
par(bty ="n", bg = "grey99", las =1,
family="serif")
if (input$nivelco2 == "H"){
pipae_mediaCO2$nivel= pipae_mediaCO2$H
escala = range(pipae_mediaCO2$media_co2, na.rm = TRUE)
min = trunc (escala [1] - 100)
max = trunc (escala [2] + 100)
if (nrow(pipae_mediaCO2) == 0) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_co2~nivel, data=pipae_mediaCO2,
type="n",
ylab=expression("Mean" ~ CO[2] ~ "ppm"), xlab= "Hours",
main="CO2\nmean by hour",
ylim = c(min, max),
xlim=c(0,23))
lines(media_co2~nivel, data=pipae_mediaCO2,
lty = 5, lwd =4,
col = "gray60")
} else if (input$nivelco2 == "D") {
pipae_mediaCO2$nivel= pipae_mediaCO2$D
escala = range(pipae_mediaCO2$media_co2, na.rm = TRUE)
min = trunc (escala [1] -100)
max = trunc (escala [2] + 100)
if (is.finite(min) == FALSE | is.finite(max) == FALSE) {
stop (safeError(
"\n No data collection for that date\n use another date")
)
}
plot (media_co2~nivel, data=pipae_mediaCO2,
type="n",
ylab=expression("Mean" ~ CO[2] ~ "ppm"), xlab= "Days",
main="CO2\nmean by day",
ylim = c(min, max),
xlim=c(0,23))
lines(media_co2~nivel, data=pipae_mediaCO2,
lty = 5, lwd =4,
col = "gray60")
} else {
pipae_mediaCO2$nivel=pipae_mediaCO2$M
escala = range(pipae_mediaCO2$media_co2, na.rm = TRUE)
min = trunc (escala [1] - 100)
max = trunc (escala [2] + 100)
plot (media_co2~nivel, data=pipae_mediaCO2,
type="n",
ylab=expression("Mean" ~ CO[2] ~ "ppm"),
xlab= "Months",
main="CO2\nmean by month",
ylim = c(min, max) ,xlim=c(1,12))
lines(media_co2 ~nivel, data=pipae_mediaCO2 ,
lty = 5, lwd =4,
col = "gray60")
}
legend("topleft",c("Pipae7"),
col= c("gray60"),
lty = c(2,3,1), bty = "n")
}, res= 96)
output$boxplotvarID <-renderPlot({
parcels <- input$parVar
result <- data.frame()
if (length (parcels)==0) {
stop (safeError(
"\n Select a parcel")
)
}
for (parcel in parcels) {
result <- rbind(result, pipae_all[pipae_all$parcela == parcel, ])
}
pipae_all <- result
names (pipae_all)[c(3,5,6,17)] <-  c("temp",
"umi",
"CO\u2082",
"parcela")
vars <- input$var
if (length(vars) > 0) {
par(mfrow = c(1,length(vars)), bty = "n",
bg = "grey99", family="serif")
col = colorRampPalette(c("darkred", "lightblue"))
for (var in vars) {
boxplot(as.formula(paste(var, "~ parcela")),
data = pipae_all, main = var, col =
col(length(unique(pipae_all$parcela))),
pch="*")
#dicionariuo = var (estudar) xlab=dict[var]
}
}
}, res = 96)
output$table <- renderDataTable({
pipaes <- c(unique(pipae_all$tag))
status <- data.frame()
for (pipae in pipaes) {
sensor=pipae_all [pipae_all$tag==pipae,]
diff <- time_length(Sys.Date()-
sensor$Date [length(sensor$Date)],
unit="day")
if (diff > 0) {
test <- data.frame(sensor=as.character (pipae),
dias=sensor$Date [length(sensor$Date)],
status="No")
}else {
test  <- data.frame(sensor=as.character (pipae),
dias=as.character(sensor$Date [length(sensor$Date)]),
status="Yes")
}
status <-  rbind(status,test)
}
names (status) <- c("Sensor","Last Received","Working fine")
status
})
output$MapsPipae <- renderLeaflet ({
a <-  data.frame(lat = -23.565297,
long=-46.728907)
leaflet() |>
addProviderTiles(
provider = providers$Esri.WorldImagery, group="Stallite View") |>
addProviderTiles("OpenStreetMap",
group = "Street View") |>
addLayersControl(baseGroups = c("Satellite View",
"Street View")) |>
addCircleMarkers(lat = -23.565297,
lng = -46.728907,
radius = 30,
popup = paste(sep= "<br/>",
"Forest Reserve of the Institute of Biosciences"),
opacity = 0.10,
label="IoTree")
})
}
ui= fluidPage(theme = shinytheme("flatly"),# theme = "cerulean",
# <--- To use a theme
navbarPage( "Smart Forest",
tabPanel("About",
div(includeMarkdown("about.md"),
align="justify")),
temperatura,
umidade,
CO2,
variable,
tabPanel ("Status",
h3("Sensor's status"),
dataTableOutput(outputId = "table"),
),
tabPanel("Location",
leafletOutput(
"MapsPipae",
height = 600)
)
)# navpage end
)
shinyApp(ui=ui, server = server)
c ("CO2" ="CO\u2082",
"Temperature" = "temp",
"Moisture"= "umi")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
