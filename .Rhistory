M= month(pipae_all$Date),
Y= year(pipae_all$Date))
pipae_all$DateTime <- as.POSIXct(
paste(pipae_all$Date, pipae_all$Time),
format = "%Y-%m-%d %HH %MM %SS")
pipae_all
}
pipae_all=import_pipae(pipae=paste0(
"pipae", c(1:2,7,9:12)
)
)
pipae_all
runApp()
runApp()
diff
runApp()
runApp()
runApp()
runApp()
runApp()
diff
sensor
sensor[sensor$Date==Sys.Date(),])
Sys.Date()
sensor$Date
sensor[sensor$Date==Sys.Date(),]
length(sensor[sensor$Date==Sys.Date(),]))
dim(sensor[sensor$Date==Sys.Date(),])
dim(sensor[sensor$Date==Sys.Date(),])[1]
runApp()
#all_c = colors()
#str_subset(all_c, "p")
#q ()
#all_c = colors()
#str_subset(all_c, "p")
#q ()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
rsconnect::deployApp("~/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
rsconnect::deployApp("C:/Users/Pedro Martins/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("C:/Users/Pedro Martins/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
shiny::runApp()
runApp()
pkg <- c("shiny","shinythemes","stringr","lubridate",
"dplyr","markdown","leaflet","sf","DT","plotly")
pkg <- pkg[!pkg%in%installed.packages()]
pkg
library(plotly)
runApp()
head (pipae_all)
plot_ly(
data = pipae_all
x = ~Date
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature
type ="lines"
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type ="lines"
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type="scatters",
mode ="lines"
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type="scatter",
mode ="lines"
)
head (pipae_all)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
color=~parcela
type="scatter",
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
color=~parcela,
type="scatter",
mode ="lines"
)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
pipae_mediatemperatura
unique(pipae_mediatemperatura$parcela)
input$year
pipae_all
unique(pipae_all$parcela)
unique(pipae_mediatemperatura$parcela)
unique (pipae_all$parcela)
pipae_mediatemperatura = get_dados_separados(pipae_all,
pipae_all$Temperature,
date= pipae_all$Date,
time=pipae_all$Time,
media_nivel = input$nivel,
variavel = "temperatura")
unique(pipae_mediatemperatura$parcela)
unique (pipae_all$parcela)
runApp()
fig <- plot_ly() %>%
add_lines(x = c("a","b","c"), y = c(1,3,2))%>%
layout(title="sample figure", xaxis = list(title = 'x'), yaxis = list(title = 'y'), plot_bgcolor = "#c7daec")
plot_ly() %>%
add_lines(x = c("a","b","c"), y = c(1,3,2))%>%
layout(title="sample figure", xaxis = list(title = 'x'), yaxis = list(title = 'y'), plot_bgcolor = "#c7daec")
runApp()
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("Temperature on",
Sys.Date(),"mean by Hour",
sep = " " ),
xaxis = list(title = 'Hours'),
yaxis = list(title = 'Mean Temperature ºC'),
plot_bgcolor = "#c7daec")
runApp()
runApp()
# Example scatter plot
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", mode = "markers",
marker = list(color = 'blue', size = 10))
plot_ly(z = ~volcano, type = "surface")
swich
switch
?switch
shiny::runApp()
date
var
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("Temperature mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean Temperature ºC'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
head (pipae_mediaCO2)
runApp()
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
paste ("CO\u2082 mean by", date, sep = " ")
title = 'Mean CO\u2082 ppm'
title
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head (pipae_mediaCO2)
head (pipae_mediaCO2$parcela)
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines")
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
date
var
runApp()
runApp()
head(pipae_mediapress)
plot_ly(data=pipae_mediapress,
x=~nivel,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediapress,
x=~nivel,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
pipae_all=import_pipae(pipae=paste0(
"pipae", c(1:2,5,7,9:12)
)
)
paste0(
"pipae", c(1:2,5,7:12)
)
runApp()
runApp()
shiny::runApp()
pkg <- c("shiny","shinythemes","stringr","lubridate",
"dplyr","markdown","leaflet","sf","DT","plotly")
pkg <- pkg[!pkg%in%installed.packages()]
pkg
library(plotly)
library(shiny)
library(shinythemes)
library(stringr)
library(lubridate)
library (dplyr)
library(markdown)
library(leaflet)
library(sf)
library(DT)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
head (pipae_mediatemperatura)
nivel
names (pipae_mediatemperatura)
names (pipae_mediatemperatura)[1]
names (pipae_mediatemperatura)[1] <- "nivel"
names (pipae_mediatemperatura)[1] <- "nivel"
names (pipae_mediatemperatura)[1]
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
names (pipae_mediatemperatura)[1] <- "nivel_var"
plot_ly(data=pipae_mediatemperatura,
x=~nivel_var,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediatemperatura,
x=~nivel_var,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
runApp()
runApp()
runApp()
runApp()
names (pipae_mediapress)[1]
plot_ly(data=pipae_mediapress,
x=~nivel_var,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediapress,
x=~nivel_var,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("atmospheric pressure mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'atmospheric pressure Pa'),
plot_bgcolor = "gray95")
head (pipae_mediapress)
View (pipae_mediapress)
View (pipae_mediapress)
runApp()
data
date
data$date <- date
data <- data |>
mutate (D=day(data$date),
M= month(data$date),
Y= year(data$date))
View (data)
nivel
var
View (data)
x
dataM = data |>
group_by (across(all_of(nivel))) |>
summarise(!!var2:=mean(variavel, na.rm = TRUE))
last_dplyr_warnings()
runApp()
shiny::runApp()
runApp()
sensor=pipae_all [pipae_all$tag==pipae,]
sensor=pipae_all [pipae_all$tag==pipae,]
sensor
sensor$Date [length(sensor$Date)]
sensor$Date [length(sensor$DateTime),
sensor$Date [length(sensor$DateTime)]
sensor$Date [length(sensor$DateTime)]
sensor
sensor$Date [length(sensor$Date)]
sensor$Date [length(sensor$DateTime)]
sensor$DateTime [length(sensor$DateTime)]
time_length(Sys.Date()-
sensor$DateTime [length(sensor$DateTime)],
unit="hour")
time_length(Sys.Date()-
sensor$DateTime [length(sensor$DateTime)],
unit="day")
class (Sys.Date())
class(sensor$DateTime [length(sensor$DateTime)])
class(sensor$Time)
usethis::proj_activate("C:/Users/Pedro Martins/Desktop/Pastas/R_analises/spotify_analisesR")
usethis::proj_activate("C:/Users/Pedro Martins/Desktop/Pastas/R_analises/serial_number/)
usethis::proj_activate("C:/Users/Pedro Martins/Desktop/Pastas/R_analises/serial_number/")
shiny::runApp()
CO2
day(Sys.time())
month(Sys.Date())
runApp()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='53BFA45B362A0D6781CD214D058B407F',
secret='XMRO1Rz8I/BF8TCzpzwKhou3TQMyqIYhpR8rj6DL')
rsconnect::deployApp("~/Área de Trabalho/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
source("~/Área de Trabalho/R_analises/webapp/deployweb.R", echo=TRUE)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
runApp()
runApp()
runApp()
#install.packages('rsconnect')
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='53BFA45B362A0D6781CD214D058B407F',
secret='XMRO1Rz8I/BF8TCzpzwKhou3TQMyqIYhpR8rj6DL')
rsconnect::deployApp("~/Área de Trabalho/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
shiny::runApp()
pipae_all
nrow (pipae_all)
runApp()
runApp()
runApp()
rsconnect::deployApp("~/Área de Trabalho/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
source("~/Área de Trabalho/R_analises/webapp/deployweb.R", echo=TRUE)
