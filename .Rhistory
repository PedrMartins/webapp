shiny::runApp()
library (dplyr)
library(markdown)
library(leaflet)
library(sf)
# Load R packages
library(shiny)
# Load R packages
library(shiny)
library(shinythemes)
library(stringr)
library(lubridate)
library (dplyr)
library(markdown)
library(leaflet)
library(sf)
install.packages("shinythemes")
install.packages("markdown")
install.packages("leaflet")
runApp()
cite()
citation()
version
citation("shiny")
citation()
shiny::runApp()
Sys.Date()
day(Sys.Date())
month(Sys.Date())
year(Sys.Date())
import_pipae <-  function(pipae = NULL){
pipae_all = data.frame()
source <- c ( "pipae1" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQmbdkhDjts41TXdkpoghubvLQ_5waEms3_RSUXBa_JBg1Z0o2AEnjRpWlTe6lv8go3nouimqUEeklI/pub?output=csv",
"pipae2" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQZb9G0b6kE_I91HK7KOtIA7XJ_-OpW6I4J4ibTU4v1ljzAlgplWdzLRpsMiLqr6reiV6Jol3yrvOkE/pub?output=csv",
"pipae3"="https://docs.google.com/spreadsheets/d/e/2PACX-1vSgEviRT5URoJqohwPc4m-HuNkwkqy9TVDOVnDsu7x0hyNYJvLPlc_B9y3TrEqNf1fhe6fPensFXlOH/pub?output=csv",
"pipae7"="https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOc4PMg1xC0qpUceE6BZV8L1oLn8D5zf-dALqqWiEQZBFJH23dzPiqwn7NOlFowHEis1N4eb7JvFZ/pub?output=csv",
"pipae8"="https://docs.google.com/spreadsheets/d/e/2PACX-1vRezDFvNifmWuJUoVIIhyazBaD281lsr4qeV3EWROGEUH8CDBD01riMOWMfDbsPH0Z8wFkEmtQRbfEC/pub?output=csv"
)
#sensores <- paste("pipae",seq(1, length(source)), sep="")
sensores <- paste("pipae", c(1:3,7:8), sep="")
if (is.null(pipae)==TRUE) {stop ("inclua sensores")}
if (length(setdiff(pipae,sensores))!= 0) {
stop("não há sensores com essa tag ou há erros na tag \n não deixe espaço entre pipae e o número
\n ex: 'pipae 7' não funcionará \n ex: 'pipae7' funciona",
call. = FALSE)
}
pipaes <- match(pipae, sensores)
for (i in pipaes){
site_url <-  source[i]
site <- read.csv(site_url, dec= ",")
if (colnames(site)[1]=="Temperature"){
site  <- site %>% select(Date, Time, everything())
}
colnames(site)[which(colnames(site) == "CO2.Concentration")] <- "CO2_ppm"
if (names(source[i]) %in%
c(paste("pipae", 2, sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par2", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", 1,sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par1", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", 7,sep=""))) {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par3", length(site$CO2_ppm))
}else {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par4", length(site$CO2_ppm))
}
pipae_all <- rbind(pipae_all, site)
}
pipae_all$Date = dmy (pipae_all$Date)
pipae_all$Time = hms (pipae_all$Time)
pipae_all= pipae_all|>
mutate(H=hour(pipae_all$Time),
m=minute(pipae_all$Time),
D=day(pipae_all$Date),
M= month(pipae_all$Date),
Y= year(pipae_all$Date))
pipae_all
}
pipae_all=import_pipae(c("pipae7","pipae2",
"pipae1", "pipae8"))
head (pipae_all)
pipae_all[pipae_all$M==12,]
date_par <- pipae_all[pipae_all$M==input$month,]
date_par <- pipae_all[pipae_all$M==12,]
choices = c(unique(
sort( date_par$D)))
choices
runApp()
runApp()
renderPlot(
observeEvent(input$month, {
date_par <- pipae_all[pipae_all$M==input$month,]
updateSelectInput(inputId = "day", choices = c(unique(
sort( date_par$D)))
)
})
{
runApp()
runApp()
c("temp",
"umi",
"CO\u2082",
"parcel")
"CO\u2082"
runApp()
shiny::runApp()
install.packages('rsconnect')
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
getwd ()
rsconnect::deployApp("~/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
rsconnect::deployApp("C:/Users/Pedro Martins/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R")
)
day(Sys.time())
shiny::runApp()
runExample("10_download")   # file download wizard
ui <- fluidPage(
selectInput("fruit", "Choose a fruit:",
choices = c("Apple", "Banana", "Cherry"), selected = "Banana"),
selectizeInput("color", "Pick colors:",
choices = c("Red", "Green", "Blue"), multiple = TRUE),
checkboxGroupInput("days", "Select days:",
choices = c("Monday", "Tuesday", "Wednesday")),
radioButtons("size", "Select size:",
choices = c("Small", "Medium", "Large"), selected = "Medium"),
actionButton("update", "Update Choices"),
textOutput("selection")
)
server <- function(input, output, session) {
# Update select input dynamically
observeEvent(input$update, {
updateSelectInput(session, "fruit", choices = c("Mango", "Papaya", "Pineapple"))
updateSelectizeInput(session, "color", choices = c("Cyan", "Magenta", "Yellow"))
})
output$selection <- renderText({
paste("Fruit:", input$fruit,
"\nColors:", paste(input$color, collapse = ", "),
"\nDays:", paste(input$days, collapse = ", "),
"\nSize:", input$size)
})
}
shinyApp(ui, server)
?selectizeInput
Download <- tabPanel("Downloads",
sidebarLayout (  #layout
sidebarPanel(  #painel lateral
selectizeInput("daystart", "Day Start",
multiple = TRUE),
radioButtons(inputId = "intervalday",
label = "Interval",
choices =  c("To"="to",
"And"="and"),
selected = "To"),
selectizeInput("dayEnd", "Day End",
multiple = TRUE),
selectInput(inputId = "daypress",
label = "Day",
choices = unique(sort(pipae_all$D)),
selected = day(Sys.time()),
width = "100px"),
selectInput(inputId = "monthpres",
label = "Month",
choices = unique(pipae_all$M),
selected = month(Sys.Date()),,
width = "100px"),
selectInput(inputId = "yearpres",
label = "Year",
choices = unique(pipae_all$Y),
selected = year(Sys.Date()),
width = "100px"),
radioButtons(inputId= "parpress",
label = "Parcel",
choiceValues =  sort(unique (pipae_all$parcela)),
choiceNames = c("Parcel 1", "Parcel 2",
"Parcel 3", "Parcel 4"),
selected = "par1"),
width = 2
), #sidebarpanel end
mainPanel (
plotOutput (outputId = "pressID")
)#mainplanel end
) #sidebar layout end
) #tabpanel2 end co2
runApp()
pipae_all$M
unique(sort(pipae_all$M))
unique(sort(pipae_all$Y))
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
ui <- fluidPage(
tags$head(
tags$style(HTML("
.custom-download-btn {
background-color: #4CAF50; /* Green background */
color: white; /* White text */
border: none;
padding: 10px 20px;
font-size: 16px;
cursor: pointer;
border-radius: 5px;
}
.custom-download-btn:hover {
background-color: #45a049; /* Darker green on hover */
}
"))
),
downloadButton("download", "Custom Download", class = "custom-download-btn")
)
server <- function(input, output) {}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadButton
runApp()
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer
runApp()
shiny::runApp()
runApp()
usethis::proj_activate("~/Users/Pedro Martins/Desktop/R_analises/Pipae_analises")
usethis::proj_activate("~/Desktop/R_analises/Pipae_analises")
runApp()
runApp()
runApp()
days =c(1,7)
days
max=range (days) [2]
max
min=range (days) [1]
min
seq_along(min, max, by=1)
?seq_along
seq_along (days)
days = seq (min, max, by=1)
days
days =c(1,30)
days = seq (min, max, by=1)
days
max=range (days) [2]
min=range (days) [1]
days = seq (min, max, by=1)
days = seq (min, max, by=1)
days
days =c(1,30)
max=range (days) [2]
max
min=range (days) [1]
min
seq (min, max, by=1)
c (min:max)
runExample("06_tabsets")    # tabbed panels
runExample("04_mpg")        # global variables
source("data_update.R")
source("funcao_processamento.R")
get_data_by_month <- function(x, month=NULL,
days= NULL, order=TRUE){
if (is.null(month)) {
stop("choose a month")
}
if (is.null(days)) {
x <- x[x$M==month,]
if (order){x <-  x[order(x$DateTime),]}
return(x)
}else {
x <- x[x$M==month,]
pipae_month <- data.frame()
for (i in days) {
pipae_dia <- x[x$D==i,]
pipae_month <- rbind(pipae_dia, pipae_month)
}
if (order){pipae_month <-  pipae_month[
order(pipae_month$DateTime),]}
return(pipae_month)
}
}
get_data_by_month (pipae_all, month = 12)
pipae_all
head (pipae_all)
runApp()
runApp()
