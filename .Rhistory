content = function(file) {
write.table(filtered(), file, row.names = TRUE,)
}
)
}
shinyApp(ui=ui, server=server)
sensor
pipae
diff
test
pipae
diff
test
status
diff
sensor
status
test
diff
pipae
status
status
status
diff
sensor
sensor=pipae_all [pipae_all$tag=="pipae11",]
sensor
runApp()
runApp()
head (pipae_all)
runApp()
runApp()
shiny::runApp()
runApp()
paste("pipae", c(1:2,7,9:12), sep="")
import_pipae <-  function(pipae = NULL){
pipae_all = data.frame()
source <- c ( "pipae1" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQmbdkhDjts41TXdkpoghubvLQ_5waEms3_RSUXBa_JBg1Z0o2AEnjRpWlTe6lv8go3nouimqUEeklI/pub?output=csv",
"pipae2" ="https://docs.google.com/spreadsheets/d/e/2PACX-1vQZb9G0b6kE_I91HK7KOtIA7XJ_-OpW6I4J4ibTU4v1ljzAlgplWdzLRpsMiLqr6reiV6Jol3yrvOkE/pub?output=csv",
#"pipae3"="https://docs.google.com/spreadsheets/d/e/2PACX-1vSgEviRT5URoJqohwPc4m-HuNkwkqy9TVDOVnDsu7x0hyNYJvLPlc_B9y3TrEqNf1fhe6fPensFXlOH/pub?output=csv",
"pipae7"="https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOc4PMg1xC0qpUceE6BZV8L1oLn8D5zf-dALqqWiEQZBFJH23dzPiqwn7NOlFowHEis1N4eb7JvFZ/pub?output=csv",
#"pipae8"="https://docs.google.com/spreadsheets/d/e/2PACX-1vRezDFvNifmWuJUoVIIhyazBaD281lsr4qeV3EWROGEUH8CDBD01riMOWMfDbsPH0Z8wFkEmtQRbfEC/pub?output=csv",
"pipae9"="https://docs.google.com/spreadsheets/d/e/2PACX-1vQtwvqsZbeuuR-u18YXmgkFYPzCjd0qYGJ-oX0pNx6o6wfcS1mb140y3YNzuGYrrUVnVebdFVUf8Tss/pub?output=csv",
"pipae10"="https://docs.google.com/spreadsheets/d/e/2PACX-1vTFwcv50LDoLD0EVEV_r423wSCU6KI8gN-7wjmhZAhaWvgTUL3BeyPiAEzEWS_cHzCsAQkg6r3ssOPt/pub?output=csv",
"pipae11"="https://docs.google.com/spreadsheets/d/e/2PACX-1vSZP1CXjEgzUE0Apxx4fNK81x5711ex1ZED7wWnboy2XFe6RIUXmmXY7CSyXRC7SR6WaztfSsSjlv5n/pub?output=csv",
"pipae12"="https://docs.google.com/spreadsheets/d/e/2PACX-1vQjS8tOb5qiGdbxjv9HrwS-cpDOcMBSZ4Kyp0YW0StZGRE4lzZDo8EHXAqpfW4X3iYye1idYPXPZW7P/pub?output=csv"
)
#sensores <- paste("pipae",seq(1, length(source)), sep="")
sensores <- paste("pipae", c(1:2,7,9:12), sep="")
if (is.null(pipae)==TRUE) {stop ("inclua sensores")}
if (length(setdiff(pipae,sensores))!= 0) {
stop("não há sensores com essa tag ou há erros na tag \n não deixe espaço entre pipae e o número
\n ex: 'pipae 7' não funcionará \n ex: 'pipae7' funciona",
call. = FALSE)
}
pipaes <- match(pipae, sensores)
for (i in pipaes){
site_url <-  source[i]
site <- read.csv(site_url, dec= ",")
if (colnames(site)[1]=="Temperature"){
site  <- site %>% select(Date, Time, everything())
}
colnames(site)[which(colnames(site) == "CO2.Concentration")] <- "CO2_ppm"
if (names(source[i]) %in%
c(paste("pipae", c(2,9), sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par2", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", c(1,10),sep=""))){
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par1", length(site$CO2_ppm))
} else if (names(source[i]) %in%
c(paste("pipae", c(7,11),sep=""))) {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par3", length(site$CO2_ppm))
}else {
site$tag = rep (names(source[i]),
length(site$CO2_ppm))
site$parcela = rep ("par4", length(site$CO2_ppm))
}
pipae_all <- rbind(pipae_all, site)
}
pipae_all$Date = dmy (pipae_all$Date)
pipae_all$Time = hms (pipae_all$Time)
pipae_all= pipae_all|>
mutate(H=hour(pipae_all$Time),
m=minute(pipae_all$Time),
D=day(pipae_all$Date),
M= month(pipae_all$Date),
Y= year(pipae_all$Date))
pipae_all$DateTime <- as.POSIXct(
paste(pipae_all$Date, pipae_all$Time),
format = "%Y-%m-%d %HH %MM %SS")
pipae_all
}
pipae_all=import_pipae(pipae=paste0(
"pipae", c(1:2,7,9:12)
)
)
pipae_all
runApp()
runApp()
diff
runApp()
runApp()
runApp()
runApp()
runApp()
diff
sensor
sensor[sensor$Date==Sys.Date(),])
Sys.Date()
sensor$Date
sensor[sensor$Date==Sys.Date(),]
length(sensor[sensor$Date==Sys.Date(),]))
dim(sensor[sensor$Date==Sys.Date(),])
dim(sensor[sensor$Date==Sys.Date(),])[1]
runApp()
#all_c = colors()
#str_subset(all_c, "p")
#q ()
#all_c = colors()
#str_subset(all_c, "p")
#q ()
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("~/Desktop/R_analysis/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
rsconnect::deployApp("~/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
rsconnect::deployApp("C:/Users/Pedro Martins/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
library (rsconnect)
rsconnect::setAccountInfo(name='pedro-rufino-13021991',
token='CA30B0338DD2F76AEED6C6909E5B78D7',
secret='Ycqoz/R8hsOToeu28g0BJQumh6SlVjwHQ3chk5cG')
rsconnect::deployApp("C:/Users/Pedro Martins/Desktop/R_analises/webapp",
appFiles = c("app.R",
"data_update.R",
"funcao_processamento.R",
"about.md",
"umidade.R",
"variable.R",
"temperatura.R",
"co2.R",
"pression.R",
"library_package.R",
"Download.R")
)
shiny::runApp()
runApp()
pkg <- c("shiny","shinythemes","stringr","lubridate",
"dplyr","markdown","leaflet","sf","DT","plotly")
pkg <- pkg[!pkg%in%installed.packages()]
pkg
library(plotly)
runApp()
head (pipae_all)
plot_ly(
data = pipae_all
x = ~Date
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature
type ="lines"
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type ="lines"
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type="scatters",
mode ="lines"
)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
type="scatter",
mode ="lines"
)
head (pipae_all)
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
color=~parcela
type="scatter",
plot_ly(
data = pipae_all,
x = ~Date,
y = ~Temperature,
color=~parcela,
type="scatter",
mode ="lines"
)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
pipae_mediatemperatura
unique(pipae_mediatemperatura$parcela)
input$year
pipae_all
unique(pipae_all$parcela)
unique(pipae_mediatemperatura$parcela)
unique (pipae_all$parcela)
pipae_mediatemperatura = get_dados_separados(pipae_all,
pipae_all$Temperature,
date= pipae_all$Date,
time=pipae_all$Time,
media_nivel = input$nivel,
variavel = "temperatura")
unique(pipae_mediatemperatura$parcela)
unique (pipae_all$parcela)
runApp()
fig <- plot_ly() %>%
add_lines(x = c("a","b","c"), y = c(1,3,2))%>%
layout(title="sample figure", xaxis = list(title = 'x'), yaxis = list(title = 'y'), plot_bgcolor = "#c7daec")
plot_ly() %>%
add_lines(x = c("a","b","c"), y = c(1,3,2))%>%
layout(title="sample figure", xaxis = list(title = 'x'), yaxis = list(title = 'y'), plot_bgcolor = "#c7daec")
runApp()
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("Temperature on",
Sys.Date(),"mean by Hour",
sep = " " ),
xaxis = list(title = 'Hours'),
yaxis = list(title = 'Mean Temperature ºC'),
plot_bgcolor = "#c7daec")
runApp()
runApp()
# Example scatter plot
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", mode = "markers",
marker = list(color = 'blue', size = 10))
plot_ly(z = ~volcano, type = "surface")
swich
switch
?switch
shiny::runApp()
date
var
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("Temperature mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean Temperature ºC'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
head (pipae_mediaCO2)
runApp()
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
paste ("CO\u2082 mean by", date, sep = " ")
title = 'Mean CO\u2082 ppm'
title
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head (pipae_mediaCO2)
head (pipae_mediaCO2$parcela)
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines")
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
plot_ly(data=pipae_mediaCO2,
x=~nivel,
y=~media_co2,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by", date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
runApp()
runApp()
date
var
runApp()
runApp()
head(pipae_mediapress)
plot_ly(data=pipae_mediapress,
x=~nivel,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediapress,
x=~nivel,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("CO\u2082 mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'Mean CO\u2082 ppm'),
plot_bgcolor = "gray95")
runApp()
runApp()
pipae_all=import_pipae(pipae=paste0(
"pipae", c(1:2,5,7,9:12)
)
)
paste0(
"pipae", c(1:2,5,7:12)
)
runApp()
runApp()
shiny::runApp()
pkg <- c("shiny","shinythemes","stringr","lubridate",
"dplyr","markdown","leaflet","sf","DT","plotly")
pkg <- pkg[!pkg%in%installed.packages()]
pkg
library(plotly)
library(shiny)
library(shinythemes)
library(stringr)
library(lubridate)
library (dplyr)
library(markdown)
library(leaflet)
library(sf)
library(DT)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
head (pipae_mediatemperatura)
nivel
names (pipae_mediatemperatura)
names (pipae_mediatemperatura)[1]
names (pipae_mediatemperatura)[1] <- "nivel"
names (pipae_mediatemperatura)[1] <- "nivel"
names (pipae_mediatemperatura)[1]
plot_ly(data=pipae_mediatemperatura,
x=~nivel,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
names (pipae_mediatemperatura)[1] <- "nivel_var"
plot_ly(data=pipae_mediatemperatura,
x=~nivel_var,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediatemperatura,
x=~nivel_var,
y=~media_temperatura,
color=~parcela,
type="scatter",
mode="lines")
runApp()
runApp()
runApp()
runApp()
names (pipae_mediapress)[1]
plot_ly(data=pipae_mediapress,
x=~nivel_var,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines")
plot_ly(data=pipae_mediapress,
x=~nivel_var,
y=~media_pressao,
color=~parcela,
type="scatter",
mode="lines") |>
layout(title= paste ("atmospheric pressure mean by",
date, sep = " "),
xaxis = list(title = var),
yaxis = list(title = 'atmospheric pressure Pa'),
plot_bgcolor = "gray95")
head (pipae_mediapress)
View (pipae_mediapress)
View (pipae_mediapress)
runApp()
data
date
data$date <- date
data <- data |>
mutate (D=day(data$date),
M= month(data$date),
Y= year(data$date))
View (data)
nivel
var
View (data)
x
dataM = data |>
group_by (across(all_of(nivel))) |>
summarise(!!var2:=mean(variavel, na.rm = TRUE))
last_dplyr_warnings()
runApp()
